require_relative "graph.rb"

class Synsets
    def initialize
	    @synsets = {}
    end

    def load(synset_file)
	    invalid_lines = []
	    line_num = 0
	    f = File.open(synset_file, "r")
	    #goes through each line in file and checks if it's valid. If not valid, adds to array
	    f.each do |line|
		    line_num += 1
		    if ((line =~ /id: \d* synset: \S+/)  == nil)
			    invalid_lines.push(line_num)
		    end
      end
	    f.close
	    #if there were invalid lines, returns array
	    if (invalid_lines.size > 0)
		    return invalid_lines
	    end
	    f = File.open(synset_file, "r")
	    f.each do |line|
		    line =~ /id: (\d*) synset: (\S+)/
        if (!@synsets.has_key?($1.to_i))
          arr = $2.split(',')
          @synsets[$1.to_i] = []
          arr.each do |noun|
            (@synsets[$1.to_i]).push(noun)
          end
		    end
	    end
	    return nil
    end

    def addSet(synset_id, nouns)
      if (nouns.length == 0 || synset_id < 0 || @synsets.has_key?(synset_id))
		    return false
	    else
		    @synsets[synset_id] = nouns
		    return true
	    end
    end

    def lookup(synset_id)
      if @synsets.has_key?(synset_id)
		    return @synsets[synset_id]
	    else
		    return []
	    end
    end

    def findSynsets(to_find)
	    synset_ids = []
      synset_ids_hash = {}
	    if to_find.kind_of?(String)
        @synsets.keys.each do |key|
          if @synsets[key].include?(to_find)
            synset_ids.push(key)
          end
        end
        return synset_ids
	    elsif to_find.kind_of?(Array)
        to_find.each do |noun|
          synset_ids_hash[noun] = findSynsets(noun)
        end
        return synset_ids_hash
	    else
		    return nil
	    end
    end
end

class Hypernyms
    def initialize
      @hypernyms = {}
    end

    def load(hypernyms_file)
        raise Exception, "Not implemented"
    end

    def addHypernym(source, destination)
        if (source < 0 || destination < 0 || source == destination)
          return false
        elsif (@hypernyms.has_key?(source))
          if !(@hypernyms[source].include?(destination))
            @hypernyms[source].push(destination)
          end
        else
          @hypernyms[source] = []
          @hypernyms[source].push(destination)
        end
        return true
    end

    def lca(id1, id2)
        raise Exception, "Not implemented"
    end
end

class CommandParser
    def initialize
        @synsets = Synsets.new
        @hypernyms = Hypernyms.new
    end

    def parse(command)
        raise Exception, "Not implemented"
    end
end

